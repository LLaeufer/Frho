let type_lam = lam <X: {val, val2}> (lam (x: {val: +int, val2: +string, X}) : int (x.val+1));
let converted_type_lam = type_lam : all (X: {val, val2}) ({val: +int, val2: +string, X})->(int) ~[-%conv_label]~> all (X: {val, val2}) ({val: +int, val2: +%conv_label, X})->(int);
let converted_and_applied = app (converted_type_lam) <{other_val: +float}>;
let applied = converted_and_applied: ({val: +int, val2: +%conv_label, other_val: +float})->(int) ~[+%conv_label]~> ({val: +int, val2: +string, other_val: +float})->(int);
// applied
applied({val: 41, val2: "hello", other_val: 1.234})